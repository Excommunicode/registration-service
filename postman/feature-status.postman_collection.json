{
	"info": {
		"_postman_id": "b945995a-a284-4228-87cd-10b97f448226",
		"name": "Status",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34767378"
	},
	"item": [
		{
			"name": "Create Registration event1_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response contains number and password\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('number');",
							"    pm.expect(jsonData).to.have.property('password');",
							"})",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"username\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"+1234567890\",\n  \"eventId\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Registration event1_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response contains number and password\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('number');",
							"    pm.expect(jsonData).to.have.property('password');",
							"    pm.collectionVariables.set(\"number\", jsonData.number);",
							"    pm.collectionVariables.set(\"password\", jsonData.password);",
							"})",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"username2\",\n  \"email\": \"email2@example.com\",\n  \"phone\": \"+1234567890\",\n  \"eventId\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Registration event2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response contains number and password\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('number');",
							"    pm.expect(jsonData).to.have.property('password');",
							"})",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"username3\",\n  \"email\": \"email3@example.com\",\n  \"phone\": \"+1234567890\",\n  \"eventId\": 2\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Registration ids event1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response = pm.response.json();",
							"",
							"if (Array.isArray(response) && response.length >= 2) {",
							"    pm.collectionVariables.set(\"registrationId1\", response[0].id);",
							"",
							"    pm.collectionVariables.set(\"registrationId2\", response[1].id);",
							"} else {",
							"    console.error(\"Ответ содержит менее двух элементов или не является массивом.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=1&statuses=PENDING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "statuses",
							"value": "PENDING"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Registration ids event2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response = pm.response.json();",
							"",
							"if (Array.isArray(response) && response.length >= 1) {",
							"    pm.collectionVariables.set(\"registrationId3\", response[0].id);",
							"",
							"} else {",
							"    console.error(\"Ответ содержит менее одного элемента или не является массивом.\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=2&statuses=PENDING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "statuses",
							"value": "PENDING"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Waitlist 1_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Поле status равно WAITLIST\", function () {",
							"    pm.expect(responseData.status).to.eql(\"WAITLIST\");",
							"});",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"WAITLIST\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/{{registrationId1}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"{{registrationId1}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Approve 1_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Поле status равно WAITLIST\", function () {",
							"    pm.expect(responseData.status).to.eql(\"APPROVED\");",
							"});",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"APPROVED\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/{{registrationId2}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"{{registrationId2}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reject 2_1 no reason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"REJECTED\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/{{registrationId3}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"{{registrationId3}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reject 2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Поле status равно REJECTED\", function () {",
							"    pm.expect(responseData.status).to.eql(\"REJECTED\");",
							"});",
							";"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"REJECTED\",\n  \"rejectionReason\": \"reason\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/{{registrationId3}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"{{registrationId3}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by event 1 APPROVED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Size = 1\", function () {",
							"    pm.expect(responseData.length).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=1&statuses=APPROVED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "statuses",
							"value": "APPROVED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by event 1 WAITLIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Size = 1\", function () {",
							"    pm.expect(responseData.length).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=1&statuses=WAITLIST",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "statuses",
							"value": "WAITLIST"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by event 2 REJECTED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Size = 1\", function () {",
							"    pm.expect(responseData.length).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=2&statuses=REJECTED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "statuses",
							"value": "REJECTED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get status counts 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Поле WAITLIST имеет значение 1\", function () {",
							"    pm.expect(responseData.statusCounts.WAITLIST).to.eql(1);",
							"});",
							"",
							"pm.test(\"Поле APPROVED имеет значение 1\", function () {",
							"    pm.expect(responseData.statusCounts.APPROVED).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/1/status/counts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"1",
						"status",
						"counts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get status counts 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Поле REJECTED имеет значение 1\", function () {",
							"    pm.expect(responseData.statusCounts.REJECTED).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/2/status/counts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"2",
						"status",
						"counts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 1_2",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"number\": \"{{number}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/registrations",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"registrations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check 1_1 -> PENDING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"const responseData = pm.response.json();",
							"",
							"pm.test(\"Size = 1\", function () {",
							"    pm.expect(responseData.length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Поле status первого объекта равно PENDING\", function () {",
							"    pm.expect(responseData[0].status).to.eql(\"PENDING\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/registrations/status?eventId=1&statuses=PENDING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registrations",
						"status"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "statuses",
							"value": "PENDING"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "registrationId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "registrationId2",
			"value": "",
			"type": "string"
		},
		{
			"key": "registrationId3",
			"value": "",
			"type": "string"
		},
		{
			"key": "number",
			"value": ""
		},
		{
			"key": "password\n",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		}
	]
}